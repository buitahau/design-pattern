Decorator là một trong những Pattern thuộc nhóm cấu trúc. Nó cho phép người dùng thêm chức năng mới với đối tượng
hiện tại mà không muốn ảnh hưởng đến các đối tượng khác. Kiểu thiết kế này có cấu trúc hoạt động như một lớp bao bọc
(wrapper) cho lớp hiện có. Mỗi khi cần thêm tính năng mới, đối tượng hiện có được wrap trong một đối tượng mới
(decorator class).

Decorator Pattern sử dụng composition thay vì inheritance để mở rộng đối tượng. Decorator pattern còn được gọi là
Wrapper hay Smart Proxy.

Decorator pattern hoạt động dựa trên một đối tượng đặc biệt, được gọi là decorator. Nó có cùng một interface với đối
tượng cần bao bọc, vì vậy phía client sẽ không nhận thấy khi bạn đưa cho nó một wrapper thay vì đối tượng gốc.

Tất các các wrapper có một trường để lưu trữ một giá trị của đối tượng gốc. Hầu hết các wrapper khởi tạo trường đó
với một đối tượng được truyền vào constructor của chúng. Wrapper có cùng interface với đối tượng đích. Khi bạn gọi
một phương thức, nó thực hiện cùng một phương thức trong một đối tượng được wrap và sau đó thêm một tính năng mới vào
kết quả, công việc này tùy thuộc vào logic nghiệp vụ.

Cách implement:
- Component: là một interface quy định các method chung cần phải có cho tất cả các thành phần tham gia.
- ConcreteComponent: là lớp implement các phương thức của Component.
- Decorator: là một abstract class dùng để duy trì một tham chiếu của đối tượng Component và đồng thời cài đặt các
phương thức của Component interface.
- ConcreteDecorator: là lớp implement các phương thức của Decorator, đồng thời nó cài đặt thêm các tính năng mới cho
Component.
- Client: đối tượng sử dụng Component.

Lợi ích của Decorator Pattern:
- Tăng cường khả năng mở rộng của đối tượng, bởi những thay đổi sẽ được thực hiện bằng cách implement trên các lớp mới.
- Client sẽ không nhận thấy sự khác biết khi bạn đưa cho nó một wrapper thay vì đối tượng gốc.
- Một đối tượng sẽ được bao bọc bởi nhiều wrapper cùng lúc.
- Cho phép thêm hoặc xóa tính năng của một đối tượng lúc thực thi.

Sử dụng Decorator Pattern khi:
- Khi muốn thêm tính năng mới cho các đối tượng mà không ảnh hưởng đến các đối tượng này.
- Khi không thể mở rộng đối tượng bằng cách thừa kế. Chẳng hạn một class sử dụng từ khóa final, muốn mở rộng class
này chỉ còn cách là sử dụng decorator.

So sánh Decorator và Adapter:
- Cả hai đều là structural pattern và sử dụng cách composition để cài đặt.
- Decorator cho phép thêm một tính năng mới vào object nhưng không được sử dụng phép thừa kế. Nó cho phép thay đổi
lúc runtime. Adapter được sử dụng khi bạn có một interface, và bạn muốn ánh xạ interface đó đến một đối tượng khác có
 vai trò chức năng tương tự, nhưng là một interface khác.
- Decorator có xu hương hoạt động trên một đối tượng. Adapter có xu hướng hoạt động trên nhiều đối tượng